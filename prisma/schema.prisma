// Prisma schema file for AI Realtor Backend

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Listing {
  id             String   @id @default(uuid())
  type           ListingType
  propertyType   String?   @db.VarChar(50) @default("default") // тип недвижимости (гибкое поле)
  status         ListingStatus @default(DRAFT)
  title          String?   @db.VarChar(200)
  summary        String?   @db.Text // краткое описание
  description    String?   @db.Text // полное описание
  highlights     String[]  // ключевые особенности объекта
  keywords       String[]  // SEO ключевые слова
  metaDescription String?  @db.VarChar(160) // SEO мета-описание
  price          Decimal?  @db.Decimal(14,2)
  photos         String[]  // медиа файлы - фотографии
  documents      String[]  // медиа файлы - документы
  userFields     Json?     // произвольные поля пользователя (city, floor, balcony и т.п.)
  aiHints        Json?     // зарезервировано под будущие подсказки ИИ
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  @@index([status, createdAt])
  @@index([type])
  @@index([propertyType])
  @@map("listings")
}

enum ListingType {
  SALE
  RENT
}

enum ListingStatus {
  DRAFT
  READY
  ARCHIVED
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.Text
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  sessions     Session[]
  
  @@index([email])
  @@map("users")
}

model Session {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  lastActivityAt DateTime  @default(now()) @map("last_activity_at")
  expiresAt      DateTime  @map("expires_at")
  revokedAt      DateTime? @map("revoked_at")
  ipHash         String?   @map("ip_hash") @db.Text
  uaHash         String?   @map("ua_hash") @db.Text
  
  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
  @@map("sessions")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}